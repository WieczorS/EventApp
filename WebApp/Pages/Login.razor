

@page "/login"
@layout EmptyLayout
@using Blazored.LocalStorage
@using System.Net
@using Blazorise.Extensions
@inject ILocalStorageService _LocalStorage
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject HttpClient HttpClient

   <RadzenStack Gap="0" Class="rz-my-12 rz-mx-auto rz-border-radius-6 rz-shadow-10" Style="width: 100%; max-width: 400px; overflow: hidden;">
       <RadzenCard Class="rz-shadow-0 rz-border-radius-0 rz-background-color-info rz-p-12" style="text-align: center;">
           <RadzenText TextStyle="TextStyle.DisplayH3" TagName="TagName.H2" Class="rz-color-white rz-mb-0">WebApp</RadzenText>
       </RadzenCard>
       <RadzenCard Class="rz-shadow-0 rz-p-12">
           <form onsubmit="@HandleSubmit">
               <RadzenLogin AllowRegister="false" AllowResetPassword="false" Login=@(args => HandleSubmit(args)) />
           </form>
       </RadzenCard>
   </RadzenStack>



@code {
    
    async Task HandleSubmit(LoginArgs args)
    {
        var Http = ClientFactory.CreateClient("Api");
        try
        {
            // Wywołaj API, aby uwierzytelnić użytkownika
            var result = await Http.PostAsJsonAsync("http://localhost:5175/Auth", new
            {
                Login = args.Username,
                Password = args.Password
            });
            

            var token = await result.Content.ReadAsStringAsync();
            result.EnsureSuccessStatusCode();
            await _LocalStorage.SetItemAsync(Constants.TOKEN_NAME,token);
            NavigationManager.NavigateTo("/listevents");

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            NotificationService.Notify(
                new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Błędne hasło lub login!", Duration = 6000 });

        }
    }
}